// Code generated by MockGen. DO NOT EDIT.
// Source: database/in_memory.go

// Package mock_database is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "week-6-assignment/models"

	gomock "github.com/golang/mock/gomock"
)

// MockIDatabase is a mock of IDatabase interface.
type MockIDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase.
type MockIDatabaseMockRecorder struct {
	mock *MockIDatabase
}

// NewMockIDatabase creates a new mock instance.
func NewMockIDatabase(ctrl *gomock.Controller) *MockIDatabase {
	mock := &MockIDatabase{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabase) EXPECT() *MockIDatabaseMockRecorder {
	return m.recorder
}

// GetWallet mocks base method.
func (m *MockIDatabase) GetWallet() (*models.DataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet")
	ret0, _ := ret[0].(*models.DataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockIDatabaseMockRecorder) GetWallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockIDatabase)(nil).GetWallet))
}

// GetWalletByUsername mocks base method.
func (m *MockIDatabase) GetWalletByUsername(username string) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUsername", username)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUsername indicates an expected call of GetWalletByUsername.
func (mr *MockIDatabaseMockRecorder) GetWalletByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUsername", reflect.TypeOf((*MockIDatabase)(nil).GetWalletByUsername), username)
}

// PostWalletByUsername mocks base method.
func (m *MockIDatabase) PostWalletByUsername(username string, balance float64) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostWalletByUsername", username, balance)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostWalletByUsername indicates an expected call of PostWalletByUsername.
func (mr *MockIDatabaseMockRecorder) PostWalletByUsername(username, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostWalletByUsername", reflect.TypeOf((*MockIDatabase)(nil).PostWalletByUsername), username, balance)
}

// PutWalletByUsername mocks base method.
func (m *MockIDatabase) PutWalletByUsername(username string, balance float64) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutWalletByUsername", username, balance)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutWalletByUsername indicates an expected call of PutWalletByUsername.
func (mr *MockIDatabaseMockRecorder) PutWalletByUsername(username, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWalletByUsername", reflect.TypeOf((*MockIDatabase)(nil).PutWalletByUsername), username, balance)
}
